/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.ConfigureSystem;
import model.Doctor;
import model.Encounter;
import model.Hospital;
import model.House;
import model.MasterDB;
import model.Patient;

/**
 *
 * @author AMEYA A
 */
public class SystemAdminDashboard extends javax.swing.JFrame {

    /**
     * Creates new form SystemAdminDashboard
     */
    ConfigureSystem cSysMain;
    public SystemAdminDashboard(ConfigureSystem cSysMain) {
        initComponents();
        this.cSysMain = cSysMain;
        populateHospTable(cSysMain);
        populateCommTable(cSysMain);
        populateDoctorTable(cSysMain);
        populatePatientTable(cSysMain);
        populateCityTable(cSysMain);
    }
    public SystemAdminDashboard() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblHospTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCommunity = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDoctor = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPatients = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblCity = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtHosId = new javax.swing.JTextField();
        txtHosName = new javax.swing.JTextField();
        txtDocName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCommId = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCommName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtHouse = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPatName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtBloodGrp = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtVitalSign = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCityId = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtCityName = new javax.swing.JTextField();
        btnViewHos = new javax.swing.JButton();
        btnUpdateHos = new javax.swing.JButton();
        btnCreateHos = new javax.swing.JButton();
        btnDeleteHos = new javax.swing.JButton();
        btnViewCom = new javax.swing.JButton();
        btnUpdateComm = new javax.swing.JButton();
        btnCreateComm = new javax.swing.JButton();
        btnDeleteCom = new javax.swing.JButton();
        btnViewDoc = new javax.swing.JButton();
        btnUpdateDoc = new javax.swing.JButton();
        btnCreateDoc = new javax.swing.JButton();
        btnDeleteDoc = new javax.swing.JButton();
        btnViewPat = new javax.swing.JButton();
        btnUpdatePat = new javax.swing.JButton();
        btnCreatePat = new javax.swing.JButton();
        btnDeletePat = new javax.swing.JButton();
        btnViewCity = new javax.swing.JButton();
        btnUpdateCity = new javax.swing.JButton();
        btnCreateCity = new javax.swing.JButton();
        btnDeleteCity = new javax.swing.JButton();
        btnLandingPage = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblHospTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Hospital Id", "Hospital Name", "Doctor Name"
            }
        ));
        jScrollPane1.setViewportView(tblHospTable);

        tblCommunity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Community Id", "Community Name", "House", "Hospital Name"
            }
        ));
        jScrollPane2.setViewportView(tblCommunity);

        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Doctors"
            }
        ));
        jScrollPane3.setViewportView(tblDoctor);

        tblPatients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Patient Name", "Blood Group", "Vital Sign"
            }
        ));
        jScrollPane4.setViewportView(tblPatients);

        tblCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "City Id", "City Name", "Community Name", "Hospital Name"
            }
        ));
        jScrollPane5.setViewportView(tblCity);

        jLabel1.setText("Hospital Id");

        jLabel2.setText("Hospital Name");

        jLabel3.setText("Doctors Name");

        txtHosName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHosNameActionPerformed(evt);
            }
        });

        txtDocName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocNameActionPerformed(evt);
            }
        });

        jLabel4.setText("Community Id");

        jLabel5.setText("Community Name");

        txtCommName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCommNameActionPerformed(evt);
            }
        });

        jLabel6.setText("House");

        txtHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHouseActionPerformed(evt);
            }
        });

        jLabel7.setText("Patient Name");

        txtPatName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatNameActionPerformed(evt);
            }
        });

        jLabel8.setText("Blood Group");

        txtBloodGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBloodGrpActionPerformed(evt);
            }
        });

        jLabel9.setText("Vital Sign");

        txtVitalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVitalSignActionPerformed(evt);
            }
        });

        jLabel10.setText("City Id");

        txtCityId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityIdActionPerformed(evt);
            }
        });

        jLabel11.setText("City Name");

        txtCityName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityNameActionPerformed(evt);
            }
        });

        btnViewHos.setText("View Hos");
        btnViewHos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewHosActionPerformed(evt);
            }
        });

        btnUpdateHos.setText("Update Hos");
        btnUpdateHos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateHosActionPerformed(evt);
            }
        });

        btnCreateHos.setText("Create Hos");
        btnCreateHos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateHosActionPerformed(evt);
            }
        });

        btnDeleteHos.setText("Delete Hos");
        btnDeleteHos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteHosActionPerformed(evt);
            }
        });

        btnViewCom.setText("View Comm");
        btnViewCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewComActionPerformed(evt);
            }
        });

        btnUpdateComm.setText("Update Comm");
        btnUpdateComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCommActionPerformed(evt);
            }
        });

        btnCreateComm.setText("Create Comm");
        btnCreateComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCommActionPerformed(evt);
            }
        });

        btnDeleteCom.setText("Delete Comm");
        btnDeleteCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteComActionPerformed(evt);
            }
        });

        btnViewDoc.setText("View Doc");
        btnViewDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDocActionPerformed(evt);
            }
        });

        btnUpdateDoc.setText("Update Doc");
        btnUpdateDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateDocActionPerformed(evt);
            }
        });

        btnCreateDoc.setText("Create Doc");
        btnCreateDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateDocActionPerformed(evt);
            }
        });

        btnDeleteDoc.setText("Delete Doc");
        btnDeleteDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDocActionPerformed(evt);
            }
        });

        btnViewPat.setText("View Pat");
        btnViewPat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPatActionPerformed(evt);
            }
        });

        btnUpdatePat.setText("Update Pat");
        btnUpdatePat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePatActionPerformed(evt);
            }
        });

        btnCreatePat.setText("Create Pat");
        btnCreatePat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePatActionPerformed(evt);
            }
        });

        btnDeletePat.setText("Delete Pat");
        btnDeletePat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePatActionPerformed(evt);
            }
        });

        btnViewCity.setText("View City");
        btnViewCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewCityActionPerformed(evt);
            }
        });

        btnUpdateCity.setText("Update City");
        btnUpdateCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCityActionPerformed(evt);
            }
        });

        btnCreateCity.setText("Create City");
        btnCreateCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCityActionPerformed(evt);
            }
        });

        btnDeleteCity.setText(" Delete City");
        btnDeleteCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCityActionPerformed(evt);
            }
        });

        btnLandingPage.setLabel("Home Page");
        btnLandingPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLandingPageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel10))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDocName, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                    .addComponent(txtCityId))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel6)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(txtHosName, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCommName)
                            .addComponent(txtHouse)
                            .addComponent(txtCityName)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHosId, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCommId, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtVitalSign)
                        .addGap(71, 71, 71))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtBloodGrp)
                        .addGap(71, 71, 71))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPatName)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewCity)
                            .addComponent(btnUpdateCity)
                            .addComponent(btnCreateCity)
                            .addComponent(btnDeleteCity))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnLandingPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(115, 115, 115)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewHos)
                            .addComponent(btnUpdateHos)
                            .addComponent(btnCreateHos)
                            .addComponent(btnDeleteHos))
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnViewCom)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnUpdateComm)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnDeleteCom))
                                    .addComponent(btnCreateComm)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnViewDoc)
                                    .addComponent(btnUpdateDoc)
                                    .addComponent(btnCreateDoc)
                                    .addComponent(btnDeleteDoc))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnUpdatePat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnCreatePat)
                                    .addComponent(btnDeletePat)
                                    .addComponent(btnViewPat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLandingPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewCom)
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUpdateComm)
                                    .addComponent(btnDeleteCom))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCreateComm))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(btnViewHos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateHos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateHos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteHos)))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnViewDoc)
                            .addGap(5, 5, 5)
                            .addComponent(btnUpdateDoc)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCreateDoc)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteDoc))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewPat)
                        .addGap(5, 5, 5)
                        .addComponent(btnUpdatePat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreatePat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(btnDeletePat)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnViewCity)
                        .addGap(5, 5, 5)
                        .addComponent(btnUpdateCity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateCity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(btnDeleteCity)))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHosId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCommId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtPatName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtHosName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtCommName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtBloodGrp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDocName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(txtVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(txtCityName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCityId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(146, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHosNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHosNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHosNameActionPerformed

    private void txtDocNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocNameActionPerformed

    private void txtCommNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCommNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCommNameActionPerformed

    private void txtHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHouseActionPerformed

    private void txtPatNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatNameActionPerformed

    private void txtBloodGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBloodGrpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBloodGrpActionPerformed

    private void txtVitalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVitalSignActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVitalSignActionPerformed

    private void txtCityIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityIdActionPerformed

    private void txtCityNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityNameActionPerformed

    private void btnViewHosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewHosActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHospTable.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be viewed");
            return;
        }
        DefaultTableModel model = (DefaultTableModel)tblHospTable.getModel();
        txtHosId.setText(model.getValueAt(selectedRowIndex, 0).toString());
        txtHosName.setText(model.getValueAt(selectedRowIndex, 1).toString());
        txtDocName.setText(model.getValueAt(selectedRowIndex, 2).toString());
    }//GEN-LAST:event_btnViewHosActionPerformed

    private void btnUpdateHosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateHosActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHospTable.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be updated");
            return;
        }
        DefaultTableModel modelHosp = (DefaultTableModel)tblHospTable.getModel();
//        DefaultTableModel modelDoc = (DefaultTableModel)tblDoctor.getModel();
        
        for(int i=0;i<cSysMain.getHospitalDirUpdate().size();i++){
            if(cSysMain.getHospitalDirUpdate().get(i).getHospitalId().equals(modelHosp.getValueAt(selectedRowIndex, 0).toString())){
               if(txtHosId.getText().isEmpty()&& txtHosName.getText().isEmpty() && txtDocName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"All fields cannot be empty");
           
        }else{
        if(!txtHosId.getText().isEmpty()){
            cSysMain.getHospitalDirUpdate().get(i).setHospitalId(txtHosId.getText());
            for(Community com:cSysMain.getCommunityMasterList()){
                for(Hospital hosp:com.getHosp()){
                    if(hosp.getHospitalId().equals(cSysMain.getHospitalDirUpdate().get(i).getHospitalId())){
                        hosp.setHospitalId(txtHosId.getText());
                    }
                }
            }
            for(City c:cSysMain.getCityList()){
                for(Hospital hosp:c.getHospList()){
                    if(hosp.getHospitalId().equals(cSysMain.getHospitalDirUpdate().get(i).getHospitalId())){
                        hosp.setHospitalId(txtHosId.getText());
                    }
                }
            }
        }
        if(!txtHosName.getText().isEmpty()){           

            cSysMain.getHospitalDirUpdate().get(i).setHospitalName(txtHosName.getText());
            for(Community com:cSysMain.getCommunityMasterList()){
                for(Hospital hosp:com.getHosp()){
                    if(hosp.getHospitalName().equals(cSysMain.getHospitalDirUpdate().get(i).getHospitalName())){
                        hosp.setHospitalName(txtHosName.getText());
                    }
                }
            }
            for(City c:cSysMain.getCityList()){
                for(Hospital hosp:c.getHospList()){
                    if(hosp.getHospitalName().equals(cSysMain.getHospitalDirUpdate().get(i).getHospitalName())){
                        hosp.setHospitalName(txtHosName.getText());
                    }
                }
            }
        }
        if(!txtDocName.getText().isEmpty()){
            
            for(Doctor doc:cSysMain.getDoctorList()){
                
                    if(doc.getDoctorName().equals(cSysMain.getHospitalDirUpdate().get(i).getDoctor().getDoctorName())){
                        doc.setDoctorName(txtDocName.getText());
                        cSysMain.getHospitalDirUpdate().get(i).setDoctor(doc);
                    }
                
            }
            
            
        }
        } 
      }
        }
        populateHospTable(cSysMain);
        populateCityTable(cSysMain);
        populateCommTable(cSysMain);
        populateDoctorTable(cSysMain);
    }//GEN-LAST:event_btnUpdateHosActionPerformed

    private void btnCreateHosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateHosActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHospTable.getSelectedRow();
        if(txtHosId.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the hospitalId");   
        }
        else if(txtHosName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the hospitalName");   
        }
        else if(txtDocName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the Doctors Name");   
        }
        else if(txtCommId.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the Community Id");
        }
        else if(txtCommName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the Community Name");
        }
        else if(txtHouse.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the House Name");
        }
        else if(txtCityId.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the City Id");
        }
        else if(txtCityName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the City Name");
        }
        else{
        DefaultTableModel modelHosp = (DefaultTableModel)tblHospTable.getModel();
        DefaultTableModel modelDoc = (DefaultTableModel)tblDoctor.getModel();
        House hNew = new House("HN1",txtHouse.getText());
        Doctor docNew = new Doctor(txtDocName.getText(), "123", "abc");
        Hospital hosNew = new Hospital(txtHosName.getText(),txtHosId.getText(),docNew);
        ArrayList<House> hListNew = new ArrayList<House>();
        ArrayList<Hospital> hosListNew = new ArrayList<Hospital>();
        hListNew.add(hNew);
        hosListNew.add(hosNew);
        cSysMain.getHospitalDirUpdate().add(hosNew);
        cSysMain.getDoctorList().add(docNew);
        cSysMain.getAllHouses().add(hNew);
        cSysMain.getMasterHouseListy().add(hListNew);
        Community commNew = new Community(hListNew,txtCommName.getText(),hosListNew,txtCommId.getText());
        cSysMain.getCommunityMasterList().add(commNew);
        ArrayList<Community> commListNew = new ArrayList<Community>();
        commListNew.add(commNew);
        cSysMain.getMasterCommunityListy().add(commListNew);
        City cityNew = new City(hosListNew,commListNew,txtCityName.getText(),txtCityId.getText());
        cSysMain.getCityList().add(cityNew);
        MasterDB masterNew = new MasterDB(cityNew, hosNew, docNew, commNew);
        cSysMain.getMasterList().add(masterNew);
        
        populateHospTable(cSysMain);
        populateDoctorTable(cSysMain);
        populateCityTable(cSysMain);
        populateCommTable(cSysMain);
        }
    }//GEN-LAST:event_btnCreateHosActionPerformed

    private void btnDeleteHosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteHosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteHosActionPerformed

    private void btnViewComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewComActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCommunity.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be viewed");
            return;
        }
        DefaultTableModel model = (DefaultTableModel)tblCommunity.getModel();
        txtCommId.setText(model.getValueAt(selectedRowIndex, 0).toString());
        txtCommName.setText(model.getValueAt(selectedRowIndex, 1).toString());
        txtHouse.setText(model.getValueAt(selectedRowIndex, 2).toString());
        txtHosName.setText(model.getValueAt(selectedRowIndex, 3).toString());
    }//GEN-LAST:event_btnViewComActionPerformed

    private void btnUpdateCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCommActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCommunity.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to be updated");
            return;
        }
        DefaultTableModel modelHosp = (DefaultTableModel)tblCommunity.getModel();
//        DefaultTableModel modelDoc = (DefaultTableModel)tblDoctor.getModel();
        
        for(int i=0;i<cSysMain.getCommunityMasterList().size();i++){
            if(cSysMain.getCommunityMasterList().get(i).getCommunityId().equals(modelHosp.getValueAt(selectedRowIndex, 0).toString())){
               if(txtCommId.getText().isEmpty()&& txtCommName.getText().isEmpty() && txtHouse.getText().isEmpty() && txtHosName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"All fields cannot be empty");
           
        }else{
        if(!txtCommId.getText().isEmpty()){
            cSysMain.getCommunityMasterList().get(i).setCommunityId(txtCommId.getText());
            
            for(City c:cSysMain.getCityList()){
                for(Community comm:c.getCommList()){
                    if(comm.getCommunityId().equals(cSysMain.getCommunityMasterList().get(i).getCommunityId())){
                        comm.setCommunityId(txtCommId.getText());
                    }
                }
            }
        }
        if(!txtCommName.getText().isEmpty()){           

            cSysMain.getCommunityMasterList().get(i).setCommunityName(txtCommName.getText());
           
            for(City c:cSysMain.getCityList()){
                for(Community comm:c.getCommList()){
                    if(comm.getCommunityName().equals(cSysMain.getCommunityMasterList().get(i).getCommunityName())){
                        comm.setCommunityName(txtCommName.getText());
                    }
                }
            }
        }
        if(!txtHouse.getText().isEmpty()){
            
            for(House house:cSysMain.getAllHouses()){
                for(House h:cSysMain.getCommunityMasterList().get(i).getHouseList()){
                    if(house.getHouseName().equals(h.getHouseName())){
                        house.setHouseName(txtHouse.getText());
                        h.setHouseName(txtHouse.getText());
                    }
                }
                
            }
            
            
        }
        
        if(!txtHosName.getText().isEmpty()){           

            
            for(Hospital h:cSysMain.getHospitalDirUpdate()){
               for(Hospital hComm:cSysMain.getCommunityMasterList().get(i).getHosp()){
                        if(h.getHospitalName().equals(hComm.getHospitalName())){
                            h.setHospitalName(txtHosName.getText());
                   
                        
                    }
                    }
            }
            for(City c:cSysMain.getCityList()){
                for(Hospital hosp:c.getHospList()){
                    for(Hospital h:cSysMain.getCommunityMasterList().get(i).getHosp()){
                        if(hosp.getHospitalName().equals(h.getHospitalName())){
                            hosp.setHospitalName(txtHosName.getText());
                            h.setHospitalName(txtHosName.getText());
                        
                    }
                    }
                }
            }
        }
        
        } 
      }
        }
        populateHospTable(cSysMain);
        populateCityTable(cSysMain);
        populateCommTable(cSysMain);
        populateDoctorTable(cSysMain);
        
    }//GEN-LAST:event_btnUpdateCommActionPerformed

    private void btnCreateCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCommActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblHospTable.getSelectedRow();
        if(txtHosId.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the hospitalId");   
        }
        else if(txtHosName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the hospitalName");   
        }
        else if(txtDocName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the Doctors Name");   
        }
        else if(txtCommId.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the Community Id");
        }
        else if(txtCommName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the Community Name");
        }
        else if(txtHouse.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the House Name");
        }
        else if(txtCityId.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the City Id");
        }
        else if(txtCityName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this,"Please enter the City Name");
        }
        else{
        DefaultTableModel modelHosp = (DefaultTableModel)tblHospTable.getModel();
        DefaultTableModel modelDoc = (DefaultTableModel)tblDoctor.getModel();
        House hNew = new House("HN1",txtHouse.getText());
        Doctor docNew = new Doctor(txtDocName.getText(), "123", "abc");
        Hospital hosNew = new Hospital(txtHosName.getText(),txtHosId.getText(),docNew);
        ArrayList<House> hListNew = new ArrayList<House>();
        ArrayList<Hospital> hosListNew = new ArrayList<Hospital>();
        hListNew.add(hNew);
        hosListNew.add(hosNew);
        cSysMain.getHospitalDirUpdate().add(hosNew);
        cSysMain.getDoctorList().add(docNew);
        cSysMain.getAllHouses().add(hNew);
        cSysMain.getMasterHouseListy().add(hListNew);
        Community commNew = new Community(hListNew,txtCommName.getText(),hosListNew,txtCommId.getText());
        cSysMain.getCommunityMasterList().add(commNew);
        ArrayList<Community> commListNew = new ArrayList<Community>();
        commListNew.add(commNew);
        cSysMain.getMasterCommunityListy().add(commListNew);
        City cityNew = new City(hosListNew,commListNew,txtCityName.getText(),txtCityId.getText());
        cSysMain.getCityList().add(cityNew);
        MasterDB masterNew = new MasterDB(cityNew, hosNew, docNew, commNew);
        cSysMain.getMasterList().add(masterNew);
        
        populateHospTable(cSysMain);
        populateDoctorTable(cSysMain);
        populateCityTable(cSysMain);
        populateCommTable(cSysMain);
        } 
    }//GEN-LAST:event_btnCreateCommActionPerformed

    private void btnDeleteComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteComActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteComActionPerformed

    private void btnViewDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnViewDocActionPerformed

    private void btnUpdateDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateDocActionPerformed

    private void btnCreateDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateDocActionPerformed

    private void btnDeleteDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteDocActionPerformed

    private void btnViewPatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnViewPatActionPerformed

    private void btnUpdatePatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdatePatActionPerformed

    private void btnCreatePatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreatePatActionPerformed

    private void btnDeletePatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeletePatActionPerformed

    private void btnViewCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnViewCityActionPerformed

    private void btnUpdateCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateCityActionPerformed

    private void btnCreateCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateCityActionPerformed

    private void btnDeleteCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteCityActionPerformed

    private void btnLandingPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLandingPageActionPerformed
        // TODO add your handling code here:
        new MainSelectionPage(cSysMain).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnLandingPageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SystemAdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SystemAdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SystemAdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SystemAdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SystemAdminDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateCity;
    private javax.swing.JButton btnCreateComm;
    private javax.swing.JButton btnCreateDoc;
    private javax.swing.JButton btnCreateHos;
    private javax.swing.JButton btnCreatePat;
    private javax.swing.JButton btnDeleteCity;
    private javax.swing.JButton btnDeleteCom;
    private javax.swing.JButton btnDeleteDoc;
    private javax.swing.JButton btnDeleteHos;
    private javax.swing.JButton btnDeletePat;
    private java.awt.Button btnLandingPage;
    private javax.swing.JButton btnUpdateCity;
    private javax.swing.JButton btnUpdateComm;
    private javax.swing.JButton btnUpdateDoc;
    private javax.swing.JButton btnUpdateHos;
    private javax.swing.JButton btnUpdatePat;
    private javax.swing.JButton btnViewCity;
    private javax.swing.JButton btnViewCom;
    private javax.swing.JButton btnViewDoc;
    private javax.swing.JButton btnViewHos;
    private javax.swing.JButton btnViewPat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable tblCity;
    private javax.swing.JTable tblCommunity;
    private javax.swing.JTable tblDoctor;
    private javax.swing.JTable tblHospTable;
    private javax.swing.JTable tblPatients;
    private javax.swing.JTextField txtBloodGrp;
    private javax.swing.JTextField txtCityId;
    private javax.swing.JTextField txtCityName;
    private javax.swing.JTextField txtCommId;
    private javax.swing.JTextField txtCommName;
    private javax.swing.JTextField txtDocName;
    private javax.swing.JTextField txtHosId;
    private javax.swing.JTextField txtHosName;
    private javax.swing.JTextField txtHouse;
    private javax.swing.JTextField txtPatName;
    private javax.swing.JTextField txtVitalSign;
    // End of variables declaration//GEN-END:variables
    
    private void populateHospTable(ConfigureSystem cSysMain) {
        DefaultTableModel model = (DefaultTableModel)tblHospTable.getModel();
        model.setRowCount(0);

        for(Hospital myRow:cSysMain.getHospitalDirUpdate()){
            Object[] row = new Object[4];
            row[0] = myRow.getHospitalId();
            row[1] = myRow.getHospitalName();
            row[2] = myRow.getDoctor().getDoctorName();
            model.addRow(row);
        }
    }
    
    private void populateCommTable(ConfigureSystem cSysMain) {
        DefaultTableModel model = (DefaultTableModel)tblCommunity.getModel();
        model.setRowCount(0);

        for(Community myRow:cSysMain.getCommunityMasterList()){
            Object[] row = new Object[4];
            row[0] = myRow.getCommunityId();
            row[1] = myRow.getCommunityName();
            row[2] = myRow.getHouseList().get(0).getHouseName();
            row[3] = myRow.getHosp().get(0).getHospitalName();
            model.addRow(row);
        }
    }
    
    private void populateDoctorTable(ConfigureSystem cSysMain) {
        DefaultTableModel model = (DefaultTableModel)tblDoctor.getModel();
        model.setRowCount(0);

        for(Doctor myRow:cSysMain.getDoctorList()){
            Object[] row = new Object[4];
            row[0] = myRow.getDoctorName();
        
            model.addRow(row);
        }
    }
    
    private void populatePatientTable(ConfigureSystem cSysMain) {
        DefaultTableModel model = (DefaultTableModel)tblPatients.getModel();
        model.setRowCount(0);

        for(Patient myRow:cSysMain.getPatList()){
            Object[] row = new Object[4];
            row[0] = myRow.getPatientName();
            row[1] = myRow.getBloodGroup();
            row[2] = myRow.getVitalSign().getVitalSign();
        
            model.addRow(row);
        }
    }
    
        private void populateCityTable(ConfigureSystem cSysMain) {
        DefaultTableModel model = (DefaultTableModel)tblCity.getModel();
        model.setRowCount(0);

        for(City myRow:cSysMain.getCityList()){
            Object[] row = new Object[4];
            row[0] = myRow.getCityId();
            row[1] = myRow.getCityName();
            row[2] = myRow.getCommList().get(0).getCommunityName();
            row[3] = myRow.getHospList().get(0).getHospitalName();
            model.addRow(row);
        }
    }
}
